datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model comments {
  id                                       String           @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  text                                     String
  created_by_user_id                       String?          @db.Uuid
  updated_by_user_id                       String?          @db.Uuid
  created_at                               DateTime         @default(now()) @db.Timestamp(6)
  updated_at                               DateTime         @default(now()) @db.Timestamp(6)
  deleted_at                               DateTime?        @db.Timestamp(6)
  deleted_by_user_id                       String?          @db.Uuid
  status                                   String           @default("'active'")
  parent_id                                String?          @db.Uuid
  users_comments_created_by_user_idTousers users?           @relation("comments_created_by_user_idTousers", fields: [created_by_user_id], references: [id], onUpdate: NoAction)
  users_comments_deleted_by_user_idTousers users?           @relation("comments_deleted_by_user_idTousers", fields: [deleted_by_user_id], references: [id], onUpdate: NoAction)
  comments                                 comments?        @relation("commentsTocomments", fields: [parent_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  other_comments                           comments[]       @relation("commentsTocomments")
  users_comments_updated_by_user_idTousers users?           @relation("comments_updated_by_user_idTousers", fields: [updated_by_user_id], references: [id], onUpdate: NoAction)
  tasks_comments                           tasks_comments[]
}

model patients {
  id                   String                 @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  first_name           String
  last_name            String
  created_at           DateTime               @default(now()) @db.Timestamp(6)
  updated_at           DateTime               @default(now()) @db.Timestamp(6)
  patients_identifiers patients_identifiers[]
  tasks                tasks[]
}

model patients_identifiers {
  id         String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  patient_id String   @db.Uuid
  system     String
  value      String
  patients   patients @relation(fields: [patient_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([system, value], map: "patients_identifiers_system_value_unique")
}

model pgmigrations {
  id     Int      @id @default(autoincrement())
  name   String   @db.VarChar(255)
  run_on DateTime @db.Timestamp(6)
}

model tasks {
  title                                  String              @db.VarChar(255)
  description                            String?
  due_at                                 DateTime?           @db.Timestamp(6)
  task_type                              String?             @db.VarChar(50)
  task_data                              Json?
  status                                 String?             @default("pending") @db.VarChar(50)
  priority                               String?             @db.VarChar(50)
  assigned_by                            String?             @db.Uuid
  completed_at                           DateTime?           @db.Timestamp(6)
  created_at                             DateTime?           @default(now()) @db.Timestamp(6)
  updated_at                             DateTime?           @default(now()) @db.Timestamp(6)
  patient_id                             String?             @db.Uuid
  assigned_to_user_id                    String?             @db.Uuid
  assigned_by_user_id                    String?             @db.Uuid
  id                                     String              @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  users_tasks_assigned_by_user_idTousers users?              @relation("tasks_assigned_by_user_idTousers", fields: [assigned_by_user_id], references: [id], onUpdate: NoAction)
  users_tasks_assigned_to_user_idTousers users?              @relation("tasks_assigned_to_user_idTousers", fields: [assigned_to_user_id], references: [id], onUpdate: NoAction)
  patients                               patients?           @relation(fields: [patient_id], references: [id], onUpdate: NoAction)
  tasks_comments                         tasks_comments[]
  tasks_identifiers                      tasks_identifiers[]
}

model tasks_comments {
  id         String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  task_id    String?   @db.Uuid
  comment_id String?   @db.Uuid
  comments   comments? @relation(fields: [comment_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  tasks      tasks?    @relation(fields: [task_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "tasks_notes_task_id_fkey")
}

model tasks_identifiers {
  id      String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  task_id String @db.Uuid
  system  String
  value   String
  tasks   tasks  @relation(fields: [task_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([system, value], map: "tasks_identifiers_system_value_unique")
}

model users {
  id                                          String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  first_name                                  String
  last_name                                   String
  email                                       String     @unique
  created_at                                  DateTime   @default(now()) @db.Timestamp(6)
  updated_at                                  DateTime   @default(now()) @db.Timestamp(6)
  comments_comments_created_by_user_idTousers comments[] @relation("comments_created_by_user_idTousers")
  comments_comments_deleted_by_user_idTousers comments[] @relation("comments_deleted_by_user_idTousers")
  comments_comments_updated_by_user_idTousers comments[] @relation("comments_updated_by_user_idTousers")
  tasks_tasks_assigned_by_user_idTousers      tasks[]    @relation("tasks_assigned_by_user_idTousers")
  tasks_tasks_assigned_to_user_idTousers      tasks[]    @relation("tasks_assigned_to_user_idTousers")
}
